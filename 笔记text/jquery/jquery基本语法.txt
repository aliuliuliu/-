                                                             (jquery 入口函数)
$(function(){
...  // 此处是页面DOM加载完成的入口
})
$(document).ready(function(){
... // 此处是页面DOM加载完成的入口
})
1.等着DOM结构渲染完毕即可执行内部代码 不必等到所有外部资源加载完成 jquery帮我们完成了封装
2.相对于 原生js中的DOMContentLoaded
3.不同于原生js中的load事件是等页面文档 外部的js文件 css文件 图片加载完毕才执行内部代码
                                                               （jquery的顶级对象 $）
1.$是jquery的别称 在代码中可以使用jquery代替$ 但一般为了方便 通常都是直接使用$
2.$是jquery的顶级对象 相当于原生JavaScript中的window 把元素利用$包装成jquery对象 就可以调用jquery的方法
                                                      （jquery 对象和 DOM对象）
1. 用原生js获取过来的对象就是DOM对象
2.用jquery方式获取过来的对象是jquery对象 本质：通过$把DOM元素进行了包装
3.jquery 对象的本质是：利用$对DOM对象包装后产生的对象（伪数组形式存储）
                              （DOM对象与jquery对象之间是可以相互转换的）
因为原生js比jquery更大 原生的一些属性和方法jquery没有给我们封装 要想使用这些属性个方法需要把jquery对象装换为DOM对象才能使用
1.DOM 对象转换为jquery对象 ：$(DOM对象)
2.jquery对象转换为DOM对象 （两种方式）
$('div')[index]  index 是索引号
$('div').get(index) index 是索引号
                                                                          （jquery API）
                                                                         （jquery 选择器）
jquery基础选择器
原生js 获取元素方式很多 很杂 而且兼容性情况不一致 因此jquery给我们做了个封装 是获取元素统一标准
$("选择器") //里面选择器直接写 css 选择器即可 但是要加引号
名称                                用法                                描述3
ID选择器                           $("#id")                      获取指定id的元素
全选选择器                         $("*")                          匹配所有元素
类选择器                            $(".class")                    获取同一类class的元素
标签选择器                         $("div")                       获取同一类标签的所有选择器
并集选择器                         $("div，p，li")             选取多个元素
交集选择器                         $("li.current")              交集元素
子代选择器                         $("ul>li")                     使用>号获取亲儿子层次级元素 注意 并不会获取孙子层级的元素
后代选择器                         $("ul li")                      使用空格，代表后代选择器 获取ul下所有li元素 包括孙子等
                                                                             （jquery 设置样式）
$('div').css('属性','值')
                                                                       （隐式迭代）（重要）
遍历内部DOM元素 （伪数组形式存储）的过程就叫做隐式迭代
                                                                           （jquery 筛选选择器）
语法                         用法                               描述
：first                      $("li:first")                    获取第一个li元素
：last                       $("li:last")                    获取最后一个li元素
：eq（index）          $("li:eq(2)")                 获取到的li元素中  选择索引号为2的元素 索引号ibdex从0开始
：odd                        $("li:odd")                  获取到的li元素中 获取索引号为奇数的元素
：even                       $("li:even")                获取到的li元素中  获取索引号为偶数的元素
                                                                          (jquery 筛选方法)
语法                              用法                                说明、
parent（）                  $("li").parent                               查找父级 最近一级的父级 亲爸爸
children（selector）  $("ul").children("li")                相当于$("ul>li")  ,最近一级（亲儿子）           
find（selector）         $(ul).find("li")                         相当于$("ul li")  后代选择器
siblings（selector）   $(".first").siblings("li")            查找兄弟节点 不包括自己本身
nextAll（[expr]）      $(".first").nextAll()                 查找当前元素之后所有的同辈元素
prevtAll（[expr]）     $(".first").prevtAll()                查找当前元素之前所有的同辈元素
hasClass(class)           $("div").hasClass("protected") 检查当前的元素是否含有某个元素特定的类 如果有 则返回true
eq（index）               $("li").eq(2)                                 相当于$("li.eq(2)"). index 从0开始
                                                                          （ jquery样式操作）
参数可以是对象的形式 方便设置多组样式属性名和属性值用冒号隔开 属性可以不用加引号
$(this）.css({
width:100,
height:100,
backgroundColor : "red"
) 
                                                                              （jquery类操作）
 //1.添加类addClass（）
$(this).addClass("current")
  //2.删除类 removeClass（）
 $("div").removeClass("current")
  //切换类 toggleClass（）
$("div").toggleClass("current")
                                                                         链式操作
 $(this).addClass("one1").siblings().removeClass("one1");
 $(".two .two1").eq(index).show().siblings().hide();
                                                     （类操作与className区别）
原生js中className会覆盖元素原先里面的类名
jquery里面类操作只是对指定类进行操作  不影响原来的类名
                                                                    (jquery 效果)
jquery给我们封装了很多动画效果最为常见的如下
                                                                          显示隐藏：
show()   显示
hide()    隐藏
toggle() 切换
1.显示语法规范
show（[speed],[easing],[fn]）
hide（[speed],[easing],[fn]）
toggle([speed],[easing],[fn])
                                                                           2.显示参数
1.（参数都可以省略  无动画直接显示）
2.（speed：三种预定速度之一的字符串（"show","normal","or","fast"））或表示动画时长的毫秒数值（如：1000）
3.easing：（Optional）用来指定切换效果 默认是 swing 可用参数 linear
                                                                             滑动:
slideDown()
slideUP()
slideToggle()
                                                                        淡入淡出
fadeln()
fadeOut()
fadeToggle()
fadeTo()
fadeTo() 渐进方式调整到指定的不透明
fadeTo([speed],opacity,[easing],[fn])
                                                                        效果参数
1.opacity透明度必须写 取值0~1之间
2.speed：三种预定速度之的字符串（"slow","normal"or,"fast"）或表示动画时长的毫秒数（如:1000）必须写
3.easing:(Optional)用来指定切换效果 默认是 swing 可用参数linear
4.fn：回调函数，在动画完成时执行的函数 每个元素执行一次
                                                                     自定义动画:
animate()
1.语法
animate(params,[speed],[easing],[fn])
2.参数
（1）params：想要更改的样式属性 以对象形式传递 必须写 属性名可以不用带引号 如果是复合属性则需要采取驼峰命名法borderLeft 其余参数都可以省略
（2）speed：三种预定速度之的字符串（"slow","normal"or,"fast"）或表示动画时长的毫秒数（如:1000）必须写
（3）easing:(Optional)用来指定切换效果 默认是 swing 可用参数linear
（4）fn：回调函数，在动画完成时执行的函数 每个元素执行一次

                                                           （事件切换）
hover（[over],out）
1.over 鼠标移动到元素上要触发的函数（相当于mouseenter）
2.out 鼠标移动出元素要触发的函数（相当于mouseleave）
$(".nav>li").hover(function(){
$(this).children("ul").slideDown(200);
},function(){
$(this).children("ul").slideUp(200);
})
2.事件切换hover 如果只写一个函数 那么鼠标经过个鼠标离开都会触达这个函数
$(".nav>li").hover(function(){
$(this).children("ul").slideToggle(200);
})
动画队列及其停止排队的方法
1.动画或效果队列
动画或者效果一旦触发机会执行 如果多次触发 就造成多个动画或者效果排队执行
2.停止排队
stop()
1.stop()方法用于停止动画或效果
2.注意：stop()写到动画或者效果的前面相当于停止结束一次的动画
                                                 （jquery 属性操作）
设置或获取元素固有属性值prop()
所谓元素固有属性就是元素本身自带的属性 比如<a>元素里面的href 比如<input> 元素里面的type 	
设置或获取元素自定义属性值attr（）
1.获取属性语法
attr（"属性"）//类似原生getAttribute()
2.设置属性语法
attr（"属性","属性值"）//类似原生 setAttribute()
                                                （数据缓存 data（））
data()方法可以在指定的元素存取数据  并不会修改DOM 元素结构 一旦页面刷新 之前存放的数据都将被移除
                                                        （:checked）
$(".j-checkbox").change(function(){
if(被选中的小的复选框的个数 ===3){
就要选中全选按钮
}else{
不要被选中
console.log($(".j-checkbox:checked").length)
}
$(".j-checkbox").length 这个是所有的小复选框的个数
if($(".j-checkbox:checked").length === $(".j-checkbox").length){
$(".checkall").prop("checked",true)
}else {
$(".checkall").prop("checked",false)
}
})
                                                                  （jquery 内容文本值）
主要针对元素的内容和表单的值操作
1.普通元素的内容html()(相当于innerhtml)
html()  //获取元素的内容
html("内容") //设置元素的内容
2.普通元素文本内容text()(相当于 原生innertext)
3.获取设置表单值 val（）
val()
val("内容")
                                                                          （增减模块）
3.增减商品数量模块 首先声明一个变量 当我们点击+号（increment）就让这个值++ 然后赋值给文本框
$(".increment").click(function(){
//得到当前兄弟文本框的值
var  n =$(this).siblings(".itext").val();
n++;
$(this).siblings(".itext").val(n);
           (修改小计 模块)
1.修改普通元素的内容是text()方法
2.当前商品的价格 要把￥符号去掉再相乘 截取字符串substr(1)
var p = $(this).parent().parent().siblings(".p-price").html();
p = p.substr(1);
var pric = （ p * n）.toFixed（2）;
$(this).parent().parent().siblings(".p-sum").html("￥"+ pric );
})
$(".increment").click(function(){
//得到当前兄弟文本框的值
var  n =$(this).siblings(".itext").val();
if(n ==1){
return false;
}
n--;
$(this).siblings(".itext").val(n);
})
                                                        (parents("选择器")可以返回指定祖先元素)     
$("four").parents("one")         
                                                      (保留几位小数 toFixed（2）方法)    
最后计算的结果如果想要保留2位小数 通过toFixed（2）方法    
                                                              (jquery 元素操作)          
                                                                  1.遍历元素
jquery隐式迭代是对同一类做了同样的操作 如果想要给同一类元素做不同的操作 就需要用到遍历                   
语法1：
$("div").each(function(index,domEle){ xxx;})
1.each()方法遍历匹配的每一个元素 主要用DOM处理 each每一个
2.里面的回调函数有2个参数：index是每个元素的索引号 demEle 是每个DOM元素对象 不是jquery对象
3.所以要想使用jquery方法 需要给这个dom元素转换为jquery对象$(domEle)
2.$each()方法遍历元素 主要用于遍历数据处理数据
            // $.each($("div"), function (index, ele) {
            //     console.log(index);
            //     console.log(ele);
  $.each(arr,function(index,ele){
                console.log(index);
                console.log(ele);
            })
  //5.计算总计和总额模块
        function getSum(){
            var count = 0;//计算总件数
            var money = 0;//计算总价钱
            $(".itxt").each(function(i,ele){
                count += parseInt($(ele).val());
            })
            $(".amount-sum em").text(count)
            $("p-sum").each(function(i,ele){
                money += parseFloat($(ele).text().substr(1));
            })
            $(".price-sum em").text("￥"+money.toFixed(2))
        }
                                                                          2.创建元素
语法;
$("<li></li>")
动态创建了一个li标签
var li = $("<li>我是后来小li</li>")
//1.创建元素      
var li = $("<li>我是后来小li</li>")
//2.添加元素               
//(1)内部添加
$("ul").append(li); 后面添加
$("ul").prepend(li); 前面添加           
 //(2)外部添加
 var div = $("<div>我是后妈生的</div>")
 var div1 = $("<div>我是后妈生的</div>")
 $(".test").after(div)
 $(".test").before(div1)       
 //3.删除元素
$("ul").remove()  //删除匹配元素（本身）
$("ul").empty() //删除匹配的元素集合中所有的子节点
$("ul").html() //清空匹配的元素内容
                                                                  （jquery 尺寸  位置操作）
                                                                          （jquery 尺寸）
语法                                                           用法
width()/height()                                       获取匹配元素宽度和高度值  只算width/height
innerWidth()/innerHeight()                      获取匹配元素宽度和高度值  包含padding
outerWidth()/outerHight()                                       获取匹配元素宽度和高度值  包含padding border
outerWidth(true)/outerHight(true)                                       获取匹配元素宽度和高度值  包含padding border margin
                                                                            （jquery 位置）
位置主要有三个：offset(),position(),scrollTop()/scrollLeft()
1.offset()设置或获取元素偏移
（1）offset()方法设置或返回被选元素相当于文档的偏移坐标  跟父级没有关系
3.scrollTop()/scrollLeft()设置或获取元素被卷去的头部和左侧
3.scrollTop()方法设置或返回被选元素被卷去的头部
                                                                      （jquery 事件注册）
单个事件注册
语法：
element.事件（function（）{}）
$("div").click((){ 处理事件})
其他和原生基本一致
比如 mouseover，mouseout，blur，focus，change，keydown，keyup，resize，scroll等
                                                                   事件处理on()绑定事件
on()方法在匹配元素绑定一个或多个事件的事件处理函数
语法：
element.on(events,[selector,fn])
1.events 一个或多个用空格分隔的事件类型 如click 或keydown
2.selecor 元素的子元素选择器
3.fn:回调函数 即绑定在元素身上的侦听函数
4.事件处理on（）绑定事件
on()方法优势2：
可以事件委派操作 事件委派的定义就是 把原来加给子元素身上的事件绑定在父元素身上 就是把事件委派给父元素
 $("ul").on("click","li",function(){
 alert(11)
  })
再此之前有bind（），live（），delegate（）等方法来处理事件绑定或者事件委派 最新版本的请用on 代替他们
                                                                   （事件处理 off（）解绑事件）、
off（）方法可以移除通过on（）方法添加事件处理程序
$("p").off() //解除p元素所以事件处理程序
$("p").off("click") //解除p元素上面的点击事件 后面的 foo是侦听函数
$("p").off("click","li") //解绑事件委托
如果有的事件只想触发一次 可以使用one()来绑定事件
                                                             （自动触发事件 trigger()）
有些事件希望自动触发 比如轮播图自动播放能跟点点击右侧按钮一致 可以利用定时器自动触发右侧按钮点击事件 不必鼠标点击触发
1.元素.事件
element.click() //第一种简写形式
 2.元素.trigger("事件")
 $("input").trigger("focus");
 3.元素.triggerHandler("事件") 就是不会触发元素的默认行为
 $("div").triggerHandler("click")
 $("input").on("focus",function(){
 $(this).val("你好吗")
 })
  // $("input").triggerHandler("focus")
   })
                                                                      （事件对象）
事件被触发 就会有事件对象的产生
element.on (events,[selector],function(event){})
阻止默认行为：event。preventDefault（）或者 return false
阻止冒泡：event.stopPropagation()
                                                         (jquery对象拷贝 extend)
我们想要把某个对象拷贝（合并）给另外一个对象使用 此时可以使用$.extend()方法
语法：
$.extend([deep],target,object1,[objectN])
1.deep:如果设为true为深拷贝 默认为false 先拷贝
3.object1：待拷贝到第一个对象的对象
4.objectN：待拷贝到第N个对象的对象
5.浅拷贝是把被拷贝的对象复杂数据类型中的地址拷贝给目标对象 修改目标对象会影响被拷贝对象
6.深拷贝 前面加true 完全拷贝（拷贝的对象而不是地址）修改目标元素不会影响被拷贝对象
                                                                 (多库共存)
问题概述：
jquery使用$作为表示符 随着jquery的流行 其他js库也会用这$作为标识符 这样一起使用会引起冲突
客观需求：
需要一个解决方案，让jquery和其他的js库不存在冲突 可以同时存在 这就叫做多库共存
jquery解决方法：
1.把里面的$符号 统一改为jquery 比如jquery（"div"）
2.jquery变量规定新的名称：$.noConflict()  $.noConflict()让jquery 释放对$控制权 让自己决定
                                                                        (jquery插件)
jquery功能比较有限 想要更复杂的特效效果  可以借助与jquery插件完成
注意：这些插件也是依赖于jquery来完成的 所以必须要先引入jquery文件 因此也称为jquery插件
jquery插件常见的网站：
1.jquery插件库 http://www.jq22.com/
2.jquery之家  http://www.htmleaf.com/
jquery插件使用步骤
1.引入相关文件（jquery文件和插件文件）
2.复制相关html css js （调用插件）
                                                             （图片的懒加载）
2.图片懒加载（图片使用延迟加载在可提高网页下载速度。它也能帮助减轻服务器负载）
当我们页面滑动可视区域 再显示图片
                                                                   （全屏滚动（fullpage.js））
gitHub:http://github.com/alvarotrigo/fullPage.js
中文翻译网址：http://www.dowebok.com/demo/2014/77/
