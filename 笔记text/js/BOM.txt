                                                               （BOM）
BOM即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是window
BOM由一系列相关的对象构成，并且每个对象提供了很多方法与属性
BOM缺乏标准 JavaScript语法的标准组织是ECMA,DOM 的标准化组织是 w3c,BOM最初是Netscape浏览器标准的一部分
                                                            （BOM的构成）
window对象是浏览器的顶级对象 它具有双重角色
1.他是js访问浏览器窗口的一个接口
2.它是一个全局对象，定义在全局作用域中的变量，函数都会变成window对象的属性和方法。
在调用的时候可以省略window前面学习的对话框都属性window对象方法  如alert（），prompt（）等
注意：window下的一个特殊属性 window.name
                                                              (onload)
window.onload 是窗口（页面）加载事件 当文档内容完全加载完成就会触发该事件（包括图像，脚本文件，css，文件等），就调用的处理函数
注意：
1.有了window.onload 就可以把js代码写到页面元素的上方，因为onload是等页面内容全部加载完毕，在去处理函数
2.window.onload 传统
注册事件方式只能写一次 如果有多个，会以最后一个window.onlaodw为准
3.如果使用 addElementListener 则没有限制
window.onload = function(){
            var btn = document.querySelector('button');
        btn.addEventListener('click',function(){
            alert('点击我')
        });
        }
        btn.addEventListener('click',function(){
            alert('点击我')
        });
        document.addEventListener('DOMContentLoaded',function(){
            alert(33);
        })
        //load 等页面内容全部加载完毕 包含页面dom元素 图片 flash css 等等
        //DOMContentLoaded  是DOM 加载完毕 不包含图片 falsh css 等就可以执行  加载速度比 load更快一点
                                                         （调整窗口大小事件）
window.onresize 是调整窗口大小加载事件  当触发时就调用处理函数
 var div = document.querySelector('div');
        window.addEventListener('resize',function(){
            // console.log(window.innerWidth);
            if(window.innerWidth <= 800){
                div.style.display = 'none';
            }else {
                div.style.display = 'block';
            }
        })
                                               （ 定时器之setTimeout）
//1.setTimeout
        //语法规范： window.setTimeout(调用函数，延迟时间);
        //1.这个window在调用的时候可以省略
        //2.这个延迟时间单位是毫秒 但是可以省略  如果省略默认的是 0 
        //3.这个调用函数可以直接写函数 还可以写 函数名
        //4.页面中可能有很多的定时器，我们经常给定时器加标识符（名字）
        // setTimeout(function(){
        //     console.log('时间到了');
        // },2000)
        function callback(){
        console.log('爆炸了');
        }
        var time1 = setTimeout(callback,3000);
        var time2 = setTimeout(callback,5000);	
注意：
        // 1. window 可以省略
        // 2. 这个函数可以直接写函数或者写函数名或者采取字符串 '函数名（）'
        // 三种方式 第三种不推荐
        // 3. 延迟的毫秒数省略值默认是0 如果写 必须是毫秒
        // 4.因为定时器可能有很多 所以我们经常给定时器赋值一个标识符
                                                （clearTimeout停止定时）
<button>停止爆炸按钮</button>
    <script>
        var btn = document.querySelector('button');
        var time = setTimeout(function(){
            console.log('爆炸了');
        },3000)
        btn.addEventListener('click',function(){
            clearTimeout(time)
        })
                                                         （setInterval()定时器）
// 1.setInterval
        //语法规范 ：window.setInterval(调用函数,延时事件)
        setInterval(function () {
            console.log('正在持续输出');
        }, 1000)
        //2.setTimeout  延迟时间到了，就去调用这个回调函数，只调用一次 就结束了这个定时器
        //3.serInterout 延迟时间到了 ，就去调用这个回调函数，会调用很多次  重复调用这个函数
    </script> 
                                                         （clearTimeout 停止计时）
 var btn = document.querySelector('button');
        var time = setTimeout(function(){
            console.log('爆炸了');
        },3000)
        btn.addEventListener('click',function(){
            clearTimeout(time)
        })
                                                                （this指向问题）
 //this 指向问题 一般情况下this 的最终指向的是那个调用它的对象

        //1.全局作用域或者 普通函数中this指向全局对象window（注意定时器里面的this指向window）
        console.log(this);
        function fn (){
            console.log(this);
        }
        window.fn();
        window.setInterval(function(){
            // console.log(this);
        },1000)
        //2.方法调用中谁调用this 指向谁
        var o ={
            sayHi:function(){
                console.log(this);//this 指向的是 o 这个对象
            }
        }
        var btn = document.querySelector('button');
        btn.onclick = function(){
            console.log(this);// this 指向的是 btn 这个按钮对象
        }
        btn.addEventListener('click',function(){
            console.log(this);
        })
        //3.构造函数中this指向构造函数的实例
        function fun() {
            console.log(this);  //this 指向的是fun 实例对象
        }
        var fun = new fun();
                                                                    （同步与异步）
同步:
前一个认为结束后再执行后一个任务  程序的执行顺序与任务的排列顺序是一致的 同步的 比如做饭的同步做法：我们要烧开水 等水开了（10分钟之后） 再去切菜 炒菜
异步：
你在做一件事时 因为这件事情会花费很长时间 在做这件事的同时 你还可以去处理其他事情 比如做饭的异步做法 我们在烧水的同时 利用这个10分钟 去 切菜 炒菜
                                                                    （事件循环）
由于主线程不断的重复获取任务  执行任务 再获取任务 再执行 所以这种机制被称为事件循环（event loop）
                                                                （location对象）
window对象给我们提供了一个location属性用于获取或设置窗体的URL 并且可以用于解析URL因为 这个属性返回的是一个对象 所以 我们将这个属性也称为locaction对象
location对象的属性             返回值
location.href                      获取或者设置 整个URL
location.host                     返回主机  域名 www.itheima.com
location.port                     返回端口号  如果未写返回 空字符串
location.pathname            返回路径
location.search                  返回参数
location.hash                     返回片段  #后面内容 常见于链接 锚点
重点记住 ：href 和search
                                                       (location.search 跳转页面)
 console.log(location.search);//?uname=andy
        //1.先去掉?  substr('起始位置'.截取几个字符)
        var params = location.search.substr(1);//uname=andy
        console.log(params);
        //2.利用=把字符串分割为数组 split（'='）;
        var arr = params.split('=');
        console.log(arr);
        var div = document.querySelector('div');
        div.innerHTML = arr[1]+ '欢迎您';
                                                         （location对象 常见方法）
location 对象方法                            返回值
location.assign()                            跟href 一样 可以跳转页面（也称为重定向页面）
location.replace()                           替换当前页面  因为不记录历史 所以不能退后页
location.reload()                            重新加载页面 相对于刷新按钮或者f5如果参数为true 强制刷新 ctrl+f5
var btn = document.querySelector('button')
        btn.addEventListener('click',function(){
            //记录浏览历史 所以可以实现后退功能
            // location.assign('http://www.itcast.cn')
            //不记录浏览历史 所以不可以实现后退功能
            location.replace('http://www.itcast.cn')
            // 重新加载页面 相当于刷新按钮或者f5 如果参数为true强制刷新ctrl+f5
            // location.reload('')
        })
                                                             （history对象）
history对象方法                                 作用
back（）                                           可以回退功能
forward（）                                      前进功能
go(参数)                                            前进后退功能 参数如果是1 前进1个页面 如果是-1后退一个界面
                                                               （offset概述）
offset 翻译过来就是 偏移量 我们使用offset 系列 相关属性可以动态的得到改元素的位置（偏移）大小等
.获得元素距离带有定位父元素的位置
.获得元素自身的大小（宽度高度）
.注意：返回的数值不带单位
offset系列属性                          作用
element.offsetParent               返回作为改元素带有定位的父级元素  如果父级都没有定位则返回body
element.offsetTop                    返回元素相对带有定位父元素上面的偏移
element.offsetLeft                    返回元素相对带有定位父元素左边框的偏移
element.offsetWidth                返回自身包括padding、边框 内容区的宽度 返回数值不带单位
element.offsetHeigth               返回自身包括padding、边框 内容区的宽度 返回数值不带单位
                                                            （offset 与 style 区别）
offset  我们想要获取元素大小位置 用offset更合适
style  我们想要给元素更改值  则需要用style 改变
                                                        （获得鼠标在盒子内的坐标）
 var box = document.querySelector('.box');
        box.addEventListener('mousemove',function(e){
                var x = e.pageX - this.offsetLeft;
                var y = e.pageY - this.offsetTop;
                this.innerHTML = 'x坐标是'+ x +'y坐标是'+ y ;
        }); 
                                                                   （client 概述） 
element.clientTop                    返回元素上边框的大小
element.clientLeft                    返回元素左边框的大小
element.clientWidth                返回自身包括padding、 内容区的宽度  不包含边框  返回数值不带单位
element.clientHeigth               返回自身包括padding、 内容区的宽度  不包含边框   返回数值不带单位
                                                                  （scroll 概述）（制作侧边栏）
scroll  翻译过来就是滚动的  我们使用scroll 系列的相关属性 可以动态的得到改元素的大小 滚动距离等 
scroll系列属性                  作用
element.scrollTop                    返回被卷去的上侧距离  返回数值不带单位
element.scrollLeft                     返回被卷去的左侧距离  返回数值不带单位
element.scrollWidth                返回自身包括padding、 内容区的宽度  不包含边框  返回数值不带单位
element.scrollHeigth               返回自身包括padding、 内容区的宽度  不包含边框   返回数值不带单位
                                       （ offset ， client ， scroll  主要作用）
1.offset 系列 经常用于获得元素位置  offsetTop offsetLeft
2.client 经常用于获取元素大小 clientWidth clientHeight
3.scroll 经常 用于获取滚动距离 scrollTop scrollLeft
4.注意页面滚动的距离通过 window.pageXoffset  获得
                                               （mouseenter和 mouseover 的区别）
moouseover鼠标经过自身盒子会触发  经过子盒子还会触发  mouseenter只会经过自身盒子触发
之所以这样 就是因为 mouseenter 不会冒泡
跟 mouseenter 搭配 鼠标离开 moouseleave 同样不会冒泡
                                                                （动画实现原理）
核心原理：通过定时器 setlnterval（） 不断移动盒子位置
实现步骤：
1.获得盒子当前位置
2.让盒子在当前位置加1个移动距离
3.利用定时器不断重复这个操作
4.加一个结束定时器的条件
5.注意元素需要添加定位 才能使用 element.style.left
var div = document.querySelector('div');
        var timer= setInterval(function(){
            if(div.offsetLeft >= 500){
                //停止动画
                clearInterval(timer);
            }
            div.style.left = div.offsetLeft + 5 + 'px';
        },30);
                                                                (简单动画函数封装)
 //动画原理
        // 核心原理： 通过定时器 setlnterval（） 不断移动盒子位置
        // 实现步骤：
        // 1. 获得盒子当前位置
        // 2. 让盒子在当前位置加1个移动距离
        // 3. 利用定时器不断重复这个操作
        // 4. 加一个结束定时器的条件
        // 5.注意元素需要添加定位 才能使用 element.style.left
        var div = document.querySelector('div');
        var span = document.querySelector('span');
        var btn500 = document.querySelector('.btn500');
        var btn800 = document.querySelector('.btn800');
        //简单动画 函数封装 obj 目标对象 target 目标位置
        // var obj = {};
        // obj.name :'andy';
        // 给不同的元素 指定了不同的定时器
        //1.让盒子每次移动的距离慢慢变下，速度就会慢慢落下来
        //2.核心算法 :(目标值 - 现在的位置) / 10 作为每次移动距离的步长
        //3.停止 的条件是 ： 让当前盒子位置等于目标位置就停止定时器
        function animate(obj,target, callback){
            // callback = function(){}  调用的时候 callback
            // 当我们不断的点击按钮 这个元素的速度会越来越快 因为我们开启了太多的定时器
            // 节解决方案 让我们元素只有一个定时器执行
            // 先清除以前的定时器  只保留当前的一个定时器执行
            clearInterval(obj.timer)
            obj.timer= setInterval(function(){
                //步长值写到定时器的里面
                //把我们步长值改为整数 不要出现小数的问题
                var step = (target - obj.offsetLeft) / 10;
                step = step > 0 ? Math.ceil(step) : Math.floor(step);
            if(obj.offsetLeft == target){
                //停止动画
                clearInterval(obj.timer);
                if(callback){
                    // 调用函数
                    callback();
                }
            }
            // 把每次加1这个步长值改为一个慢慢变小的值 步长公式:(目标值 - 现在的位置) / 10
            obj.style.left = obj.offsetLeft + step + 'px';
        },15);
        }
        animate(div, 500);
        btn500.addEventListener('click',function(){
        animate(span,500)
        })
        btn800.addEventListener('click',function(){
        animate(span,800,function(){
            alert('nihaoa')
        })
        })
        //匀速动画 就是 盒子是当前的位置 + 固定的值  10
        // 幻速动画就是 盒子当前的位置 + 变化的值（目标值 - 现在的位置）/ 10 
                                                          （节流阀）x
先声明个变量  var flag = true
if（flag）{
     flag = false
}
在给回调函数
function（）{
   flag= true
}