                                                                    《API》
前言   Web API 是浏览器提供的一套操作浏览器功能和页面元素的API（BOM和DOM）
API 和 Web API 总结
1.API 是为我们程序员提供的一个接口  帮助我们实现某种功能 我们会使用就可以了 不必纠结内部如何实现
2.Web API  主要是针对于浏览器提供的接口  主要针对于浏览器做交互效果
3.Web API  一般都有输入和输出（函数的传参和返回值）  WebAPI很多都是方法（函数）
4.Web API 可以结合前面学习内置对象方法的思路学习
                                                                     《DOM》
文档对象模型 （Document Object Model，简称DOM），是 w3c 组织推荐的处理可扩展标记语言（HTML 或者 XML）的标注编程接口。
                                                           （getElementByID()）
1.因为我们文档页面 从上往下加载,所以先得有标签 所以我们script写到标签下面
2. get 获得 element 元素 by 通过驼峰命名法
3.参数 id 是大小写敏感的字符串
4.返回的是一个元素对象
var timer = document.getElementById('time');
        console.log(timer);
        console.log(typeof(timer));
 5.console.dir  打印我们返回的元素对象 更好的查看里面的属性和方法
        console.dir(timer);
                                                            （根据标签名获取）
                                                    （getElementsByTagName）
// 返回的是  获取过来元素对象的集合 以伪数组的形式存储的
//1.返回的是  获取过来元素的集合  以伪数组的形式存储的
        var lis = document.getElementsByTagName('li');
        console.log(lis);
        console.log(lis[0]);
        //2.我们想要依次打印你里面的元素对象我们可以采取遍历的方式
        for (var i = 1;i < lis.length;i++){
            console.log(lis[i]);
        }
        //3.如果页面中只有一个li 返回的还是伪数组的形式
        //4.如果页面中没有这个元素返回的空的伪数组的形式
        //5.element.getElementsByTagName('标签名')  父元素必须是指点的单个元素
        var ol = document.getElementById('one');
        console.log(ol.getElementsByTagName('li'));

                                                                   （h5新增获取元素方式）
 <div class="box">盒子</div>
    <div class="box">盒子</div>
    <div id="nav">
        <ul>
            <li>首页</li>
            <li>产品</li>
        </ul>
    </div>
    <script>
        //1.getElementByClassName  根据类名获得某些元素集合
        var boxs = document.getElementsByClassName('box');
        console.log(boxs);
        //2.querySelector  返回指定选择器的第一个对象  切记 里面的选择器需要加  .bos #nav
        var firstbox = document.querySelector('.box');
        console.log(firstbox);
        var nav = document.querySelector('#nav');
        console.log(nav);
        var li = document.querySelector('li');
        console.log(li);
        //3.querySelectorAll()返回指点选择器的所有元素对象集合
        var allbox = document.querySelectorAll('.box');
        console.log(allbox);
    </script>
                                                                             （获取特殊元素）
 //1.获取body 元素
        var bodyEle = document.body;
        console.log(bodyEle);
        console.dir(bodyEle);
        //2.获取html 元素
        var htmlEle = document.documentElement;
        console.log(htmlEle);
                                                                          （事件基础）
javaScript 使我们有能力创建动态页面  而事件是可以被JavaScript 侦测到的行为
简单理解：触发---相应机制。
 <button id="btn">唐伯虎</button>
    <script>
        //点击按钮，弹出对话框
        //1.事件是有三部分组成 事件源  事件类型  事件处理程序  我们也称为事件三要素
        //(1)事件源  事件被触发的对象   谁  按钮
        var btn = document.getElementById('btn');
        //(2)事件类型  如何触发 什么事件 比如鼠标点击（onclick）还是鼠标经过  还是 键盘按下
        //(3)事件处理程序  通过一个函数赋值的方式  完成
        btn.onclick = function(){
            alert('点秋香');
        }
    </script>
                                                                   （常见的鼠标事件）
onclick                    鼠标点击左键触发
onmouseover         鼠标经过触发
onmouseout           鼠标离开触发
onfocus                   获得鼠标焦点触发
onblur                     失去鼠标触发
onmousemove        鼠标移动触发
onmouseup             鼠标弹起触发
onmousedown        鼠标按下触发
                                                                            （操作元素）

  <button >显示当前系统时间</button>
    <div >当前时间</div>
    <p>wwww</p>
    <script>
        var one = document.querySelector('button');
        var div = document.querySelector('div');
        one.onclick = function(){
            // div.innerText = '2021-1-18'
            div.innerHTML= age();
        }
        function age (){
            var date = new Date();
            var year = date.getFullYear();
            var month = date.getMonth() + 1;
            var dates = date.getDate();
            var arr = ['星期日','星期一','星期二','星期三','星期四','星期五','星期六'];
            var day = date.getDay();
            return '今天是:'+year + '年' + month + '月' + dates + '日  '+ arr[day];
        }
        // 我们元素可以不用添加事件
        var p = document.querySelector('p');
        p.innerHTML = age();
                                                               （innerText和innerHtml的区别）
  <div></div>
    <p>
        我是文字
        <span>123</span>
    </p>
    <script>
        //innerText和innerHtml的区别
        //1.innerText  不识别HTML标签   去出换行和空格
        var div = document.querySelector('div');
        div.innerText = '<strong>今天是：</strong>';
        //2.innerHTML 识别html标签  w3c 标准   保留空格和换行的
        div.innerHTML = '<strong>今天是：</strong>';
        //这两个属性是可读写的  可以获取元素里面的内容
        var p = document.querySelector('p');
        console.log(p.innerText);
        console.log(p.innerHTML);
    </script>
                                                                         (常用元素的属性操作)
1.innerText ， innerHTML  改变元素内容
2. src ， href
3.id ，alt ，title

  <button id="one">oppo</button>
    <button id="two">xiaomi</button>
    <img src="images/oppo.png" alt="" title="oppo">
    <script>
        //修改元素属性 src
        //1.获取元素
        var oppo = document.getElementById('one');
        var xiaomi = document.getElementById('two');
        var img = document.querySelector('img')
        //2.注册事件  处理程序
        xiaomi.onclick = function(){
            img.src = 'images/xm.png'
            img.title= '小米'
        }
        oppo.onclick = function(){
            img.src = 'images/oppo.png'
            img.title= 'oppo'
        }
    </script>
                                           （分时问候并显示不同图片案例）

 <img src="images/xm.png" alt="">
    <div></div>
    <script>
        //根据系统不同时间来判断  所以需要用到日期内置对象
        // 利用 多分支语句来设置不同的图片
        // 需要一个图片 并且根据时间修改图片  就需要用到操作元素src属性
        //需要一个 div 元素 显示不同问候语  修改元素即可
        //1.获取元素
        var img = document.querySelector('img');
        var div = document.querySelector('div');
        //2.得到当前的小时数
        var date = new Date();
        var h = date.getHours();
        //3.判断小时数改变图片和文字信息
        if (h < 12){
            img.src = 'images/xm.png';
            div.innerHTML = '上午好  思密达'
        }else if (h < 18){
            img.src = 'images/xm.png';
            div.innerHTML = '下午好  思密达'
        }else {
            img.src = 'images/oppo.png';
            div.innerHTML = '晚上好  思密达  好好写代码哦'
        }
    </script>
                                                       （表单元素的属性操作）
利用DOM可以操作如下表单元素的属性
type  ，value  checked ，selected ，disabled.
 <button>按钮</button>
    <input type="text" value="输入内容">
    <script>
        //1.获取元素
        var  btn = document.querySelector('button');
        var  input = document.querySelector('input')
        //2.注册事件  处理程序
        btn.onclick = function(){
            //表单里面的值 文字内容是通过 value 来修改的
            input.value = '被点击了';
            // 如果想要某个表单被禁用  不能在点击 disabled  我们想要这个按钮button禁用
            // btn.disabled = true;
            this.disabled = true;
            // this 指向的是事件函数的调用者 
        }
    </script>
                                                                   (操作元素之修改样式属性)
注意：1.js 里面的样式采取驼峰命名法  比如 fontSize，backgroundColor
          2.js 修改style 样式操作 产生的是行内样式  css 权重比较高
  // 1.获取元素
        var div = document.querySelector('div');
        // 2.注册事件  处理程序
        div.onclick = function(){
            // div.style.backgroundColor = 'purple'
            //里面的属性 采取驼峰命名法
            this.style.backgroundColor = 'purple';
            this.style.width = '300px'
        }
                                                       （通过className  更改元素样式）
1.element.style   行内样式操作
2.element.className   类名样式操作
注意：
1.如果样式修改较多  可以采取操作类名方式更改元素的样式
2.class 因为是个保留字 因此使用className来操作元素类名属性
3.className 直接会更改元素的类名  会覆盖原先的类名
 <div>文字</div>
    <script>
        // 1.获取元素
        // s                                                                                                                                              
        var div = document.querySelector('div');
        // 2.注册事件  处理程序
        div.onclick = function(){
            // div.style.backgroundColor = 'purple'
            //里面的属性 采取驼峰命名法
            //让我们当前元素的类名改为  class
            this.className = 'class'
        }
                                                               （排他思想）
首先排除其他人 然后才设置自己的样式 这种排除其他人的思想我们称为排他思想
如果有同一组元素 我们想要某一个元素实现某种样式 需要用到循环的排他思想算法
1.所有元素全部清除样式（干掉其他人）
2.给当前元素设置样式 （留下我自己）
2.注意顺序不能颠倒  首先干掉其他人 再设置自己
 var btns = document.getElementsByTagName('button');
        // btns 得到的是伪数组
        for(var i = 0; i < btns.length;i++){
            btns[i].onclick =  function(){
                for(var i = 0; i < btns.length; i++){
                    btns[i].style.backgroundColor = ''
                }
                this.style.backgroundColor = 'pink'
            }
        }
                                                      （自定义属性的操作）
1.获取属性值
element . 属性    获取属性值
element.getAttribute ('属性值')
区别：
1.获取属性值
element . 属性  获取内置属性值 （元素本身自带属性）
element.getAttribute ('属性值')   主要获得自定义的属性（标准）  我们程序员自定义的属性 
                                                          （h5 自定义属性）
设置 h5 自定义属性
h5规定自定义属性date- 开头作为属性并且赋值
比如 <div date-index = “1”> </div>
或者使用js设置
element.setAttribute('date-index',2)
  var div = document.querySelector('div')
        console.log(div.getAttribute('getTime'));
        div.setAttribute('data-time', 20);
        console.log(div.getAttribute('data-index'));
        console.log(div.getAttribute('data-list-name'));
        //h5新增的获取自定义属性的方法  他只能获取date-开头的
        //dateset 是一个集合里面存放了所有以date开头的自定义属性
        console.log(div.dataset);
        console.log(div.dataset.index);
        console.log(div.dataset.['index']);
        //如果自定义属性里面有多个-链接的单词。我们获取的时候采取  驼峰命名法
        console.log(div.dataset.listName);
        console.log(div.dataset.['lisName']);
                                                                 (节点操作)
                                                                （父级节点）
 //1.父节点 parentNode
        var erweima = document.querySelector('.erweima')
        // var box = document.querySelector('.box')
        //得到的是离元素最近的父级节点（亲爸爸） 如果找不到父节点就返回为空
        console.log(erweima.parentNode);
                                                                   （子节点）
  //DOM 提供的方法（APi）获取
        var ul = document.querySelector('ul')
        var lis = ul.querySelectorAll('li')
        //1.子节点  childNodes  所有字子节点 包括 元素节点 文本节点等等
        console.log(ul.childNodes);
        console.log(ul.childNodes[0].nodeType);
        console.log(ul.childNodes[1].nodeType);
        //2.children 获取所有的子元素节点  也是我们实际开发常用的
        console.log(ul.children);
                                                                    （兄弟节点）
 <div>我是div</div>
    <span>我是span</span>
    <script>
        var div = document.querySelector('div')
        //1.nextSibling  下一个兄弟节点  包含元素节点或者 文本节点等等
        console.log(div.nextSibling);
        console.log(div.previousSibling);
        //2.nextElementSibling 得到下一个兄弟元素节点
        console.log(div.nextElementSibling);
        console.log(div.previousElementSibling);
                                                                    （创建节点和添加节点）
 //1. 创建节点元素节点
        var li = document.createElement('li');
        //2. 添加节点  nodeappendChild(child)  node 父级  child 是子级  后面追加元素  类似于数组中的push
        var ul = document.querySelector('ul')
        ul.appendChild(li);
        //3. 添加节点  node.insertBefore (child.指定元素)；
        var lili = document.createElement('li')
        ul.insertBefore(lili,ul.children[0]);
        //4.我们想要界面添加一个新元素：1.创建元素 2.添加元素
                                                                     （删除节点）
   //1.获取元素
        var ul = document.querySelector('ul');
        var btn = document.querySelector('button');
        //2.删除元素  node.
        // ul.removeChild(ul.children[0])
        //3.点击按钮 依次删除里面的孩子
        btn.onclick = function() {
            if (ul.children.length == 0){
                this.disabled = true;
            }else {
                ul.removeChild(ul.children[0])
            }
        }
    </script>
                                                                        （克隆节点）
 var ul = document.querySelector('ul');
        //1.node.cloneNode(); 括号为空或者 里面是false  浅拷贝 只复制 标签 不复制里面的内容
        // 2.node.cloneNode(true); 括号true  深拷贝 复制 标签 并且复制里面的内容
        var lili = ul.children[0].cloneNode('true');
        ul.appendChild(lili);
                                                              （动态生成表格案例）
 // 2.往tboay 里面创建行： 有几个人（通过数组的长度） 我们就创建几行
        var tbody = document.querySelector('tbody');
        for (var i =0; i < datas.length;i++){  //外面的for管行
            //创建 tr 行
            var tr = document.createElement('tr');
            tbody.appendChild(tr);
            // 行里面创建单元格 td 单元格的数量取决于 每个对象里面的属性个数 for循环表里对象
            for(var k in datas[i]){ //里面的for循环管列  td
                //创建单元格
                var td = document.createElement('td');
                tr.appendChild(td);
                //把对象里面的属性值 datas[i][k]
                td.innerHTML = datas[i][k];
            }
            // 3.创建有删除2个字的单元格
            var td = document.createElement('td');
            td.innerHTML = '<a href="javascript:;">删除</a>';
            tr.appendChild(td);
            //for(var k in obj){
                //k 得到的是属性名
                // obj[k] 得到的是属性值
            // }
        }
        //4.删除操作  开始  
        var as = document.querySelectorAll('a');
        for (var i = 0; i < as.length;i++){
            as[i].onclick = function(){
                //点击a 删除 当前a 所在的行 （链接的爸爸的爸爸 ）node.removeChild(child)
                tbody.removeChild(this.parentNode.parentNode)
            }
        }
                                                               （三种动态创建元素区别）
document.write()
element.innerHTML
document.createElement()
区别：
1.document.write是直接将内容写入页面的内容流  但是文档流执行完毕 则他会导致页面全部重绘
2.innerHTML 是将内容写入某个DOM节点  不会导致页面全部重绘
3.innerHTML创建多个元素效率更高（不要拼接字符串 采取数组形式拼接），结构稍微复杂
4.createElement（）创建多个元素效率稍低一点点 但是结构更清晰
总结：不同浏览器，innerHTML  效率要比createElement 高
                                                                （DOM重点核心）
关于dom操作 我们主要针对于元素的操作。主要有创建，增 删 改 查 属性操作，事件操作
                                                                      (1.创建)
1.document.write
2.innerHTML
3.createElement
                                                                      （2.增）
1.appendChild
2.insertBefore
                                                                      （3.删）
1.removeChild
                                                                      （4.改）
主要修改dom的元素属性 dom元素的内容，属性，表单的值等
1.修改元素属性：src，href，title等
2.修改普通元素内容：innerHTML  innerText
3.修改表单元素：value type disabled 等
4.修改元素样式：style ，calssName
                                                                          （5.查）
主要获取查询dom的元素
1.DOM提供的API方式：getElementByid ，getElementByTagName 古老用法不太推荐
2.H5提供的新方法：querySelector , querySelectorAll  提倡
3.利用节点操作获取元素：父（parentNode）,子（children）兄（previousElementSibling，nextElementSibling） 提倡
                                                                     （6.属性操作）
主要针对于自定义属性
1.setAttribute：设置dom的属性值
2.getAttribute：得到dom的属性值
3.removeAttribute：移除属性
                                                                      （7.事件操作）
给元素注册事件，采取，事件源，事件类型 =事件处理程序
onclick                    鼠标点击左键触发
onmouseover         鼠标经过触发
onmouseout           鼠标离开触发
onfocus                   获得鼠标焦点触发
onblur                     失去鼠标触发
onmousemove        鼠标移动触发
onmouseup             鼠标弹起触发
onmousedown        鼠标按下触发
                                                                   （注册事件的两种方式）
<button>传统方式注册事件</button>
    <button>事件侦听注册事件</button>
    <script>
        var btns = document.querySelectorAll('button');
        //1.传统方式注册事件
        btns[0].onclick = function(){
            alert('hi')
        }
        //2.事件侦听注册事件 addEventListener 
        // (1)  里面的事件类型是字符串  必定加引号  而且不带on
        // (2)  同一个元素 同一个事件可以添加多个侦听器（事件处理程序）
        btns[1].addEventListener('click',function(){
            alert('hao a u')
        })
        btns[1].addEventListener('click',function(){
            alert('how are you')
        })
    </script>
                                                                  （DOM事件流）       
       // dom 事件流 三个阶段
        // 1.JS 代码中只能执行捕获或者冒泡其中的一个阶段
        // 2.onclick 和  attachEvent（ie） 只能得到冒泡阶段
        // 3.捕获阶段 如果 addEventlistener 第三个参数为 true 那么则处于捕获阶段  ducument-> html -> body ->father->son     
        //  4.捕获阶段 如果 addEventlistener 第三个参数为 false 那么则处于冒泡阶段  son->father-> body-> html-> document        
！！！ 实际开发中我们很少使用事假捕获 我们更关注事件冒泡、
有些事件是没有冒泡的  比如 onblur  onfocus  onmouseenter onmouseleave
                                                                  （事件对象）、
        //1.event 就是一个事件对象 写到我们侦听函数的 小括号里面 当形参来看
        //2. 事件对象只有有了事件才会存在 他是系统给我们自动创建的，不需要我们传递参数
        //3. 事件对象 是 我们事件的一系列相关数据的集合 跟事件相关的 比如鼠标点击里面就包含了鼠标的相关信息  鼠标坐标啊  如果是键盘事件里面就包括的键盘事件的信息 比如 判定用户按下了哪个键
        //4.这个事件对象 我们可以自己命名 比如 event e evt
        //5.事件对象也有兼容性问题 ie678 通过 window.event  兼容性写法 e = e || window.event
                                                （事件对象的常见属性和方法）
e.target   返回事件对象   标准
e.srcElement   返回触发事件的对象  非标准 ie-8使用
e.type   返回事件的类型  比如click mouseover  不带on
e.returnValue    该属性阻止默认事件  （默认行为） 非标准ie6-8使用 比如不让链接跳转
e.preventDefault()  该方法阻止默认事件（默认行为） 标准 比如不让链接跳转
e.stopPropagation   阻止冒泡  标准
e.cancelBubble   该属性组织冒泡 ie6-8使用
                                                         （事件委托的原理）

不是每个子节点单独设置事件监听器，而是事件监听器设置器在其父节点上，然后利用冒泡原理影响设置每个子节点         ！！！

   //事件委托的核心思想：给父节点添加侦听器  利用事件冒泡影响没个子节点
        var ul = document.querySelector('ul');
        ul.addEventListener('click',function(e){
               // alert('知否知否，点我应有弹框在手');
            e.target.style.backgroundColor = 'pink'
        })
                                                                 （鼠标事件对象）
e.clientX     返回鼠标相对于浏览器窗口可视区的X坐标
e.clientY     返回鼠标相对于浏览器窗口可视区的Y坐标
e.pageX      返回鼠标相对于文档页面的的X坐标   ie9+支持
e.pageY      返回鼠标相对于文档页面的的Y坐标    ie9+支持 
e.screenX    返回鼠标相对于电脑屏幕的X坐标
e.screenY    返回鼠标相对于电脑屏幕的Y坐标
        // 鼠标事件对象  MouseEvent
        //client  鼠标在可视区的
        document.addEventListener('click', function (e) {
         // 1.client  鼠标在可视区的 x 和 y 坐标
            console.log(e.clientX);
            console.log(e.clientY);
           // 2. page 鼠标在页面文档的 x 和 y 坐标       比较经常用
            console.log(e.pageX);
            console.log(e.pageY);
            //3.screen 鼠标在电脑屏幕的 x 和 y 坐标
            console.log(e.screenX);
            console.log(e.screenY);
        })
                                                              （跟随鼠标的天使）
 <style>
        img {
            position:absolute;
        }
    </style>
</head>
<body>
    <img src="images/success.png" alt="">
    <script>
 var pic = document.querySelector('img')
        document.addEventListener('mousemove',function(e){
            //1.mousemove 只要我们鼠标移动1px 就会触发这个事情
            // console.log(1);
            //2.核心原理：每次鼠标移动。我们都会获得最新的鼠标坐标  把这个 x 和 y 坐标作为图片的top 和left 值 就可以 移动图片
            var x = e.pageX;
            var y = e.pageY;
            // console.log('x坐标是'+ x,'y坐标是'+ y);
            //3. 千万不要忘记给 left 和 top 添加 px 单位
            pic.style.left = x-5 + 'px';
            pic.style.top = y -5 + 'px';
        })
                                                                   （常用键盘事件）
onkeyup   某个键盘按键松开时触发
onkeydown   某个键盘按键被按下时触发   先执行 down
onkeypress    某个键盘按键被按下时触发  但是它不识别功能键 ctrl shift
  //键盘事件对象中的keyCode属性可以得到相应链的ASCII码值
        //1.我们的keyup 和 keydown  不区分大小写 a 和 A 得到的都是65
        //1.我们的keypress 事件  区分大小写 a  97 和 A 得到的都是65
        document.addEventListener('keyup', function (e) {
            // console.log(e);
            console.log('up' + e.keyCode);
            //我们可以利用keycode 返回值的ASCII码值来判断用户按下了那个键
            if(e.keyCode === 65){
                alert('您按下了a键')
            }else {
                alert('您没有按下a键')
            }
        })
        document.addEventListener('keypress', function (e) {
            // console.log(e);
            console.log('press'+ e.keyCode);
        })
注意：onkeydown 和 onkeyup 不区别字母大小写  onkeypress 区分字母大小写
在我们实际开发中 我们更