### 什么是vue

- 构建用户界面
  - 用vue往html 页面中填充数据，非常的方便
- 框架
  - 框架是一套现成的解决方案，程序员只能遵守框架的规范 去编写自己的业务功能！
  - 要学习 vue就是在学习vue中框架中规定的用法
  - vue的指令，组件（是对UI结构的复用），路由，vuex，vue组件库
  - 只有把上面老师罗列的内容掌握以后 才有开发vue项目的能力！

### vue的特性

- 数据驱动视图

  - 数据的变化**会驱动视图**自动更新
  - 好处：程序员只管把数据维护好，那么页面结构会被vue自动渲染出来！

- 双向数据绑定

  >在网站中，form表单负责**采集数据**，ajax负责**提交数据**

  - js数据的变化会自动渲染到页面上
  - 页面上表单采集的数据发生变化的时候 会被vue自动获取到并更新到js数据中 

#### MVVM的工作原理

viewModel 作为MVVM的核心 是它把当前页面的数据源（model）和页面的结构（view）连接到了一起

当数据发生变化时 会被ViewModel监听到 VM会根据最新的数据源自动更新页面的结构

当表单元素的值发生变化时也会被 VM监听到 VM会把变化过后最新的值自动同步到Model数据源中

**注意：数据驱动视图和双向数据绑定的底层原理是MVVM（Model 数据源 ，View 视图，ViewModel就是vue的实例）**

### vue的指令与过滤器

指令（Directives）是vue为开发者提供的模板语法 用于辅助开发者渲染页面的基本结构

#### vue中的指令按照不同的用途可以分为如下6类：

- **内容渲染指令**
- **属性绑定指令**
- **事件绑定指令**
- **双向绑定指令**
- **条件渲染指令**
- **列表渲染指令**

注意：指令是vue开发中最基础，最常用，最简单的知识点

**1.1内容渲染指令**

内容渲染指令用来辅助开发者渲染DOM元素的文本内容 常用的内容渲染指令如下3个：

- **v-text**
  - v-text 指令的缺点：会覆盖元素内部原有的内容
- **{{ }}**
  - vue提供的{{ }}语法 专门用来解决 v-text 会覆盖默认文本内容问题 这种{{ }}语法的专业名称是插值表达式
  - {{ }}插值表达式：在实际开发中用的最多 只是内容的占位符 不会覆盖原有的内容
- **v-html**
  - v-html 指令的作用：可以把带有标签的字符串 渲染成真正的HTML内容！

**1.2属性绑定指令**

注意：插值表达式只能用在元素的内容节点上不能用在元素属性节点中

如果需要为元素的属性动态绑定属性值 则需要用到 v-bind 属性绑定指令 

- **v-bind**

  - vue 规定 v-bind: 指令可以简写为 :

  - 在使用v-bind属性绑定期间 如果绑定内容需要进行动态的拼接 则字符串的外面应该包裹单引号，例如：

  - ```shell
     <div :title="'box'+index">这一个div</div>
    ```

**1.3事件绑定指令**

vue 提供了 v-on事件绑定指令 用来辅助程序员为 DOM 元素绑定事件监听。

- v-on

  - 简写@

  - v-on:click

  - ```shell
      <p>count的值是：{{count}}</p>
            <!-- 在绑定事件处理函数的时候 可以使用（）传递参数 -->
            <!-- v-on：指令可以被简写为 @ -->
            <button v-on:click="add(2)"> +1</button>
            <button @click="sub"> -1</button>
           
    ```

  - **事件修饰符**

    - ```shell
       <a href="http:///www.baidu.com" @click.prevent="show">111111</a>
      ```

  -  常用的5个事件修饰符如下

    - .prevent 阻止默认行为 （例如：阻止a链接的跳转 阻止表单的提交等）
      - .stop 阻止事件冒泡
    - .capture 已捕获模式当前的事件处理函数
    - .once 绑定的事件只触发1次
    - .self 只有event.target 是当前元素自身时触发事件处理函数 

  - 按键修饰符

    - @keyup.esc

    - ```shell
      <input type="text" @keyup.esc="clearInput">
      ```

    - @keyuo.enter

  **1.4双向绑定指令**

   vue 提供了 v-model 双向数据绑定指令 用来辅助开发者在不操作DOM的前提下 快速获取表单的数据

  - **v-model**

    只能在一下使用才有意义

    - input输入框
      - type="radio"
      - type="checkbox"
      - type="xxx"
    - textarea
    - select

  - v-model 指令的修饰符

    - 为方便对用户输入的内容进行处理 vue 为v-model 指令提供了3个修饰符 分别是：
    - .number 自动将用户的输入值为数值类型
    - .trim 自动过滤用户输入的首尾空白字符
    - .lazy 在`change`是而非`input`更新

  **1.5条件渲染指令**

  条件渲染指令用来辅助来发者 按需控制DOM 的显示与隐藏 条件渲染指令有如下两个 分别是：

  - v-if
    - 原理是 每次动态的创建或移除元素 实现元素的显示和隐藏
    - 如果刚进入页面的时候 某些元素不需要被展示 后期这个元素也可能不展示 这时 v-if 会好一点
  - v-show
    - 原理是 动态为元素添加或移除`display:none`样式来实现元素的显示和隐藏
    - 如果要频繁的切换元素的显示状态 用v-show 性能会更好

  **1.6列表渲染指令**

  vue提供了v-for 列表渲染指令 用来辅助开发者 基于一个数组来循环渲染一个列表结构 v-for 指令需要使用

  item in items 形式的特殊语法 其中:

  - items 是待循环的数组
  - item 是被循环的每一项
  - **key** 

  ```shell
    <!-- 官方建议 只要用到了 v-for 指令 那么一定要绑定一个 :key 属性 -->
                  <!-- 而且 尽量id 作为 key 的值 -->
                  <!-- 官方对key的值是有要求的  字符串或数字类型 -->
                  <!-- key 的值是千万不能重复的 否则会终端报错 Duplicate keys detectde -->
                  <tr v-for="(item,index) in list" :key="item.id">
                      <td>{{ index }}</td>
                      <td>{{ item.id}}</td>
                      <td>{{ item.name}}</td>
                  </tr>
  ```

  